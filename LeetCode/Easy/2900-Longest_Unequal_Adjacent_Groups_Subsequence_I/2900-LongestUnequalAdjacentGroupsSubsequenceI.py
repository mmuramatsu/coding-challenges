class Solution:
    def getLongestSubsequence(self, words: list[str], groups: list[int]) -> list[str]:
        ans = []

        prev = -1

        for i in range(len(words)):
            if groups[i] != prev:
                ans.append(words[i])
                prev = groups[i]

        return ans


a = Solution()
print(a.getLongestSubsequence(words=["e", "a", "b"], groups=[0, 0, 1]))
print(a.getLongestSubsequence(words=["a", "b", "c", "d"], groups=[1, 0, 1, 1]))
print(a.getLongestSubsequence(words=["a", "b", "c", "d", "e"], groups=[1, 1, 1, 1, 1]))
print(a.getLongestSubsequence(words=["a", "b", "c", "d", "e"], groups=[0, 0, 0, 0, 0]))
print(
    a.getLongestSubsequence(
        words=[
            "f",
            "o",
            "l",
            "i",
            "v",
            "r",
            "a",
            "q",
            "z",
            "g",
            "p",
            "h",
            "n",
            "c",
            "y",
            "u",
            "e",
            "b",
            "k",
            "t",
            "w",
            "m",
            "x",
            "j",
            "s",
            "d",
        ],
        groups=[
            0,
            1,
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            1,
            0,
            1,
            1,
            0,
            1,
            0,
        ],
    )
)
print(
    a.getLongestSubsequence(
        words=[
            "zvedu",
            "lwdc",
            "hdzxskgolc",
            "riavnjtkkq",
            "rcjus",
            "lkdy",
            "t",
            "ogetdzwtp",
            "bxkr",
            "ul",
            "hql",
            "ajragiuuo",
            "n",
            "wve",
            "qrnsfj",
            "lxq",
            "kiiwtt",
            "ipaiguj",
            "dmp",
            "vgojlcy",
            "hl",
            "vhbylrhf",
            "utxz",
            "lc",
            "zg",
            "sny",
            "vkhd",
            "zwlzbzhuy",
            "e",
            "yay",
            "iuaz",
            "kulsuuksdi",
            "idzikb",
            "larthyyfrp",
            "tlzxb",
            "rxngmsw",
            "xyrbfmttf",
            "fgcehzw",
            "tksuk",
            "psngvcgjz",
            "alqrm",
            "bgfb",
            "fmbuv",
            "snprpzdees",
            "qlkofi",
            "yrdbyv",
            "y",
            "pnhxulzx",
            "yprndzrv",
            "yybcsdpivk",
            "xzljt",
            "tk",
            "anou",
            "tnzaszevuz",
            "iz",
            "cins",
            "lm",
            "g",
            "gap",
            "yrgowfrgv",
            "sawxnnnct",
            "unsaxygosz",
            "nsjlxxesm",
            "ujmav",
            "vj",
            "dam",
            "slnyvnzj",
            "eevhhnw",
            "gtqbbp",
            "krvzq",
            "memclrd",
            "gvwaaqrgz",
            "aigxxlhir",
            "vkbdo",
            "jazqnndx",
            "ttnai",
            "tkg",
            "iswjne",
            "scnr",
            "rm",
            "yjyr",
            "rvwo",
            "nvktima",
            "vwdqokabvb",
            "ahbmkhfim",
            "uvsvlvyvg",
            "rk",
            "ogqsoeywih",
            "v",
            "ccm",
            "fu",
            "crti",
            "bfvoapp",
            "d",
            "ayqulkg",
            "c",
            "vv",
            "qqkjaubnf",
            "pkhtth",
            "hdxmfxqpv",
        ],
        groups=[
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            1,
            1,
            1,
            1,
            0,
            0,
            1,
            0,
            1,
            1,
            0,
            1,
            1,
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            1,
            1,
            1,
            0,
            0,
            1,
            1,
            0,
            1,
            1,
            1,
            0,
            0,
            1,
            1,
            1,
            1,
            0,
            0,
            1,
            0,
            1,
            1,
            0,
            0,
        ],
    )
)
